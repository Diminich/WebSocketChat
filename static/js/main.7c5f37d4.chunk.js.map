{"version":3,"sources":["API/api.tsx","reducers/chat-reducer.tsx","components/nameInput/NameInput.tsx","components/chat/Chat.tsx","App.tsx","serviceWorker.ts","reducers/redux-store.tsx","index.tsx","App.module.scss","components/chat/Chat.module.scss","components/nameInput/NameInput.module.scss"],"names":["api","socket","subscriber","initMessagesHandler","newMessageHandler","userTypingHandler","this","on","createConnection","console","log","io","destroyConnection","disconnect","sendName","name","emit","sendMessage","message","typeMessage","initialState","messages","typingUsers","action","type","user","chatReducer","state","filter","u","id","NameInput","useState","setName","error","setError","dispatch","useDispatch","className","styles","nameInputButton","inputNameError","value","placeholder","errorInputName","normalInputName","onChange","e","currentTarget","errorOutput","to","button","disabled","length","onClick","a","setClientName","Chat","React","memo","setMessage","isAutoScrollActive","setIsAutoScrollActive","lastScrollTop","setLastScrollTop","messagesAnchorRef","useRef","useSelector","chatPage","useEffect","current","scrollIntoView","behavior","onKeyEnterPress","key","trim","preventDefault","wrapperChat","windowMessages","onScroll","element","maxScrollPosition","scrollHeight","clientHeight","scrollTop","Math","abs","map","m","renderingCustomMessages","style","marginLeft","ref","wrapperTextareaButtons","wrapperTextarea","textareaMessage","onKeyPress","exitButton","App","fn","wrapperApp","exact","path","render","notFound","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.7c5f37d4.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\nimport {messagesType, userType} from \"../Types/Types\";\r\n\r\nexport const api = {\r\n    socket: null as null | SocketIOClient.Socket,\r\n    subscriber(\r\n        initMessagesHandler: (messages: Array<messagesType>, fn: () => void) => void,\r\n        newMessageHandler: (message: messagesType) => void,\r\n        userTypingHandler: (user: userType) => void)\r\n    {\r\n        this.socket?.on ('init-messages-published', initMessagesHandler);\r\n        this.socket?.on ('new-message-sent', newMessageHandler);\r\n        this.socket?.on ('user-typing', userTypingHandler);\r\n    },\r\n\r\n    createConnection() {\r\n        console.log('init')\r\n        this.socket = io('https://samurai-chat-back.herokuapp.com');\r\n    },\r\n\r\n    destroyConnection() {\r\n        this.socket?.disconnect();\r\n        this.socket = null\r\n    },\r\n\r\n    sendName(name: string) {\r\n        this.socket?.emit('client-name-sent', name)\r\n    },\r\n\r\n    sendMessage(message: string) {\r\n        this.socket?.emit('client-message-sent', message)\r\n    },\r\n\r\n    typeMessage() {\r\n        this.socket?.emit('client-typed')\r\n    }\r\n}","import { InferActionTypes } from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport { api } from \"../API/api\";\r\nimport {messagesType, userType} from \"../Types/Types\";\r\n\r\nconst MESSAGES_RECEIVED = 'MESSAGES_RECEIVED';\r\nconst NEW_MESSAGE_RECEIVED = 'NEW_MESSAGES_RECEIVED';\r\nconst TYPING_USERS_ADDED = 'TYPING_USERS_ADDED'\r\n\r\nconst initialState = {\r\n    messages: [] as Array<messagesType>,\r\n    typingUsers: [] as Array<userType>\r\n}\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionTypes = InferActionTypes<typeof action>;\r\n\r\nconst chatReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case MESSAGES_RECEIVED: {\r\n            return {\r\n                ...state,\r\n                messages: action.messages\r\n            }\r\n        }\r\n\r\n        case NEW_MESSAGE_RECEIVED: {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.message],\r\n                typingUsers: state.typingUsers.filter((u) => u.id !== action.message.user.id)\r\n            }\r\n        }\r\n\r\n        case TYPING_USERS_ADDED: {\r\n            return {\r\n                ...state,\r\n                typingUsers: [...state.typingUsers.filter((u) => u.id !== action.user.id), action.user]\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst action = {\r\n    messagesReceived: (messages: Array<messagesType>) => ({\r\n        type: MESSAGES_RECEIVED,\r\n        messages\r\n    }as const),\r\n\r\n    newMessageReceived: (message: messagesType) => ({\r\n        type: NEW_MESSAGE_RECEIVED,\r\n        message\r\n    }as const),\r\n\r\n    typingUserAdded: (user: userType) => ({\r\n        type: TYPING_USERS_ADDED,\r\n        user,\r\n    }as const)\r\n}\r\n\r\nexport const setClientName = (name: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        api.sendName(name)\r\n    }\r\n}\r\n\r\nexport const typeMessage = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        api.typeMessage()\r\n    }\r\n}\r\n\r\nexport const sendMessage = (message: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        api.sendMessage(message)\r\n    }\r\n}\r\n\r\nexport const createConnection = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        api.createConnection()\r\n        api.subscriber((messages: Array<messagesType>, fn: (data: string) => void) => {\r\n            dispatch(action.messagesReceived(messages))\r\n            fn(\"data from front\");\r\n        }, (message: messagesType) => {\r\n            dispatch(action.newMessageReceived(message))\r\n        }, (user: userType) => {\r\n            dispatch(action.typingUserAdded(user))\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport const destroyConnection = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        api.destroyConnection()\r\n    }\r\n}\r\n\r\nexport default chatReducer;","import React, {useState} from \"react\";\r\nimport {setClientName} from \"../../reducers/chat-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport styles from './NameInput.module.scss'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NameInput = () => {\r\n    const [name, setName] = useState('')\r\n    const [error, setError] = useState(false)\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <nav className={styles.nameInputButton}>\r\n            <div className={styles.inputNameError}>\r\n                <input value={name} placeholder={'Введите имя'}\r\n                       className={error ? styles.errorInputName : styles.normalInputName}\r\n                       onChange={(e) => {\r\n                           setName(e.currentTarget.value)\r\n                           if (e.currentTarget.value === '') {\r\n                               setError(true)\r\n                           } else {\r\n                               setError(false)\r\n                           }\r\n                       }}\r\n                />\r\n                {error && <span className={styles.errorOutput}>Введите имя!</span>}\r\n            </div>\r\n            <NavLink to='/Chat'>\r\n                <button className={styles.button} disabled={name.length < 1} onClick={() => {\r\n                    dispatch(setClientName(name))\r\n                }}>\r\n                    Sent name\r\n                </button>\r\n            </NavLink>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NameInput;","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../reducers/redux-store\";\r\nimport {messagesType, userType} from \"../../Types/Types\";\r\nimport {sendMessage, typeMessage} from \"../../reducers/chat-reducer\";\r\nimport styles from './Chat.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Chat = React.memo(() => {\r\n\r\n    const [message, setMessage] = useState('')\r\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState(false)\r\n    const [lastScrollTop, setLastScrollTop] = useState(0)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const dispatch = useDispatch();\r\n\r\n    const messages = useSelector<AppStateType, Array<messagesType>>(state => state.chatPage.messages)\r\n    const typingUsers = useSelector<AppStateType, Array<userType>>(state => state.chatPage.typingUsers)\r\n\r\n    useEffect(() => {\r\n        if (isAutoScrollActive) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    const onKeyEnterPress = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter') {\r\n            if (message.trim() !== '') {\r\n                dispatch(sendMessage(message))\r\n                e.preventDefault()\r\n                setMessage('')\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <nav className={styles.wrapperChat}>\r\n            <div className={styles.windowMessages} onScroll={(e) => {\r\n                let element = e.currentTarget\r\n                const maxScrollPosition = element.scrollHeight - element.clientHeight\r\n                if (element.scrollTop > lastScrollTop && Math.abs(maxScrollPosition - element.scrollTop) < 10) {\r\n                    setIsAutoScrollActive(true)\r\n                } else {\r\n                    setIsAutoScrollActive(false)\r\n                }\r\n                setLastScrollTop(element.scrollTop)\r\n            }}>\r\n                {messages.map((m) => {\r\n                    return (\r\n                        <div className={styles.renderingCustomMessages} key={m.id}>\r\n                            <b style={{marginLeft: 5}}>{m.user.name}: </b>{m.message}\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n                {typingUsers.map((m) => {\r\n                    return (\r\n                        <div key={m.id}>\r\n                            <b>{m.name}:</b> ...\r\n                        </div>\r\n                    )\r\n                })}\r\n                <div ref={messagesAnchorRef}/>\r\n            </div>\r\n            <div className={styles.wrapperTextareaButtons}>\r\n                <div className={styles.wrapperTextarea}>\r\n                     <textarea value={message}\r\n                               className={styles.textareaMessage}\r\n                               placeholder='Введите сообщение'\r\n                               onKeyPress={(e) => {\r\n                                   dispatch(typeMessage())\r\n                                   onKeyEnterPress(e)\r\n                               }}\r\n                               onChange={(e) => {\r\n                                   setMessage(e.currentTarget.value)\r\n                               }}/>\r\n                </div>\r\n                <NavLink className={styles.exitButton} to={'/'}>\r\n                    Exit\r\n                </NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n})\r\n\r\nexport default Chat;","import React, {useEffect} from 'react';\nimport styles from './App.module.scss';\nimport NameInput from \"./components/nameInput/NameInput\";\nimport Chat from './components/chat/Chat';\nimport { Switch, Route } from 'react-router-dom';\nimport {createConnection, destroyConnection} from \"./reducers/chat-reducer\";\nimport {useDispatch} from \"react-redux\";\n\nconst App = () => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(createConnection())\n        return () => {\n            dispatch(destroyConnection())\n        }\n    }, [])\n\n    return (\n        <div className={styles.wrapperApp}>\n            <Switch>\n                <Route exact path = '/' render={ () => <NameInput />}/>\n                <Route exact path='/Chat' render={() => <Chat />} />\n                <Route render={() => <div className={styles.notFound}>404 NOT FOUND</div>} />\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport chatReducer from \"./chat-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    chatPage: chatReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./reducers/redux-store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App/>\n            </React.StrictMode>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperApp\":\"App_wrapperApp__4_LHs\",\"app\":\"App_app__37H77\",\"notFound\":\"App_notFound__3RV7n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperChat\":\"Chat_wrapperChat__2Hp2W\",\"windowMessages\":\"Chat_windowMessages__3jjbc\",\"renderingCustomMessages\":\"Chat_renderingCustomMessages__AmRBT\",\"wrapperTextareaButtons\":\"Chat_wrapperTextareaButtons__3tTUT\",\"wrapperTextarea\":\"Chat_wrapperTextarea__22R59\",\"textareaMessage\":\"Chat_textareaMessage__iOiZF\",\"exitButton\":\"Chat_exitButton__3uwwW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nameInputButton\":\"NameInput_nameInputButton__3QR2S\",\"inputNameError\":\"NameInput_inputNameError__3riJr\",\"normalInputName\":\"NameInput_normalInputName__VbNCC\",\"errorInputName\":\"NameInput_errorInputName__NDHmI\",\"errorOutput\":\"NameInput_errorOutput__2NRxL\",\"button\":\"NameInput_button__258bm\"};"],"sourceRoot":""}